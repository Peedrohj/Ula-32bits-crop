// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus II License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/25/2019 16:27:08"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Ula
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Ula_vlg_sample_tst(
	aluOp,
	funct,
	input1,
	input2,
	opCode,
	shamt,
	sampler_tx
);
input [1:0] aluOp;
input [5:0] funct;
input [31:0] input1;
input [31:0] input2;
input [5:0] opCode;
input [4:0] shamt;
output sampler_tx;

reg sample;
time current_time;
always @(aluOp or funct or input1 or input2 or opCode or shamt)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
    if ($realtime == 0 || $realtime != current_time)  
    begin                                             
        if (sample === 1'bx)                          
            sample = 0;                               
        else                                          
            sample = ~sample;                         
    end                                               
    current_time = $realtime;                         
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Ula_vlg_check_tst (
	result,
	sampler_rx
);
input [31:0] result;
input sampler_rx;

reg [31:0] result_expected;

reg [31:0] result_prev;

reg [31:0] result_expected_prev;

reg [31:0] last_result_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	result_prev = result;
end

// update expected /o prevs

always @(trigger)
begin
	result_expected_prev = result_expected;
end


// expected result[ 31 ]
initial
begin
	result_expected[31] = 1'bX;
end 
// expected result[ 30 ]
initial
begin
	result_expected[30] = 1'bX;
end 
// expected result[ 29 ]
initial
begin
	result_expected[29] = 1'bX;
end 
// expected result[ 28 ]
initial
begin
	result_expected[28] = 1'bX;
end 
// expected result[ 27 ]
initial
begin
	result_expected[27] = 1'bX;
end 
// expected result[ 26 ]
initial
begin
	result_expected[26] = 1'bX;
end 
// expected result[ 25 ]
initial
begin
	result_expected[25] = 1'bX;
end 
// expected result[ 24 ]
initial
begin
	result_expected[24] = 1'bX;
end 
// expected result[ 23 ]
initial
begin
	result_expected[23] = 1'bX;
end 
// expected result[ 22 ]
initial
begin
	result_expected[22] = 1'bX;
end 
// expected result[ 21 ]
initial
begin
	result_expected[21] = 1'bX;
end 
// expected result[ 20 ]
initial
begin
	result_expected[20] = 1'bX;
end 
// expected result[ 19 ]
initial
begin
	result_expected[19] = 1'bX;
end 
// expected result[ 18 ]
initial
begin
	result_expected[18] = 1'bX;
end 
// expected result[ 17 ]
initial
begin
	result_expected[17] = 1'bX;
end 
// expected result[ 16 ]
initial
begin
	result_expected[16] = 1'bX;
end 
// expected result[ 15 ]
initial
begin
	result_expected[15] = 1'bX;
end 
// expected result[ 14 ]
initial
begin
	result_expected[14] = 1'bX;
end 
// expected result[ 13 ]
initial
begin
	result_expected[13] = 1'bX;
end 
// expected result[ 12 ]
initial
begin
	result_expected[12] = 1'bX;
end 
// expected result[ 11 ]
initial
begin
	result_expected[11] = 1'bX;
end 
// expected result[ 10 ]
initial
begin
	result_expected[10] = 1'bX;
end 
// expected result[ 9 ]
initial
begin
	result_expected[9] = 1'bX;
end 
// expected result[ 8 ]
initial
begin
	result_expected[8] = 1'bX;
end 
// expected result[ 7 ]
initial
begin
	result_expected[7] = 1'bX;
end 
// expected result[ 6 ]
initial
begin
	result_expected[6] = 1'bX;
end 
// expected result[ 5 ]
initial
begin
	result_expected[5] = 1'bX;
end 
// expected result[ 4 ]
initial
begin
	result_expected[4] = 1'bX;
end 
// expected result[ 3 ]
initial
begin
	result_expected[3] = 1'bX;
end 
// expected result[ 2 ]
initial
begin
	result_expected[2] = 1'bX;
end 
// expected result[ 1 ]
initial
begin
	result_expected[1] = 1'bX;
end 
// expected result[ 0 ]
initial
begin
	result_expected[0] = 1'bX;
end 
// generate trigger
always @(result_expected or result)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected result = %b | ",result_expected_prev);
	$display("| real result = %b | ",result_prev);
`endif
	if (
		( result_expected_prev[0] !== 1'bx ) && ( result_prev[0] !== result_expected_prev[0] )
		&& ((result_expected_prev[0] !== last_result_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[0] = result_expected_prev[0];
	end
	if (
		( result_expected_prev[1] !== 1'bx ) && ( result_prev[1] !== result_expected_prev[1] )
		&& ((result_expected_prev[1] !== last_result_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[1] = result_expected_prev[1];
	end
	if (
		( result_expected_prev[2] !== 1'bx ) && ( result_prev[2] !== result_expected_prev[2] )
		&& ((result_expected_prev[2] !== last_result_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[2] = result_expected_prev[2];
	end
	if (
		( result_expected_prev[3] !== 1'bx ) && ( result_prev[3] !== result_expected_prev[3] )
		&& ((result_expected_prev[3] !== last_result_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[3] = result_expected_prev[3];
	end
	if (
		( result_expected_prev[4] !== 1'bx ) && ( result_prev[4] !== result_expected_prev[4] )
		&& ((result_expected_prev[4] !== last_result_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[4] = result_expected_prev[4];
	end
	if (
		( result_expected_prev[5] !== 1'bx ) && ( result_prev[5] !== result_expected_prev[5] )
		&& ((result_expected_prev[5] !== last_result_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[5] = result_expected_prev[5];
	end
	if (
		( result_expected_prev[6] !== 1'bx ) && ( result_prev[6] !== result_expected_prev[6] )
		&& ((result_expected_prev[6] !== last_result_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[6] = result_expected_prev[6];
	end
	if (
		( result_expected_prev[7] !== 1'bx ) && ( result_prev[7] !== result_expected_prev[7] )
		&& ((result_expected_prev[7] !== last_result_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[7] = result_expected_prev[7];
	end
	if (
		( result_expected_prev[8] !== 1'bx ) && ( result_prev[8] !== result_expected_prev[8] )
		&& ((result_expected_prev[8] !== last_result_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[8] = result_expected_prev[8];
	end
	if (
		( result_expected_prev[9] !== 1'bx ) && ( result_prev[9] !== result_expected_prev[9] )
		&& ((result_expected_prev[9] !== last_result_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[9] = result_expected_prev[9];
	end
	if (
		( result_expected_prev[10] !== 1'bx ) && ( result_prev[10] !== result_expected_prev[10] )
		&& ((result_expected_prev[10] !== last_result_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[10] = result_expected_prev[10];
	end
	if (
		( result_expected_prev[11] !== 1'bx ) && ( result_prev[11] !== result_expected_prev[11] )
		&& ((result_expected_prev[11] !== last_result_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[11] = result_expected_prev[11];
	end
	if (
		( result_expected_prev[12] !== 1'bx ) && ( result_prev[12] !== result_expected_prev[12] )
		&& ((result_expected_prev[12] !== last_result_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[12] = result_expected_prev[12];
	end
	if (
		( result_expected_prev[13] !== 1'bx ) && ( result_prev[13] !== result_expected_prev[13] )
		&& ((result_expected_prev[13] !== last_result_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[13] = result_expected_prev[13];
	end
	if (
		( result_expected_prev[14] !== 1'bx ) && ( result_prev[14] !== result_expected_prev[14] )
		&& ((result_expected_prev[14] !== last_result_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[14] = result_expected_prev[14];
	end
	if (
		( result_expected_prev[15] !== 1'bx ) && ( result_prev[15] !== result_expected_prev[15] )
		&& ((result_expected_prev[15] !== last_result_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[15] = result_expected_prev[15];
	end
	if (
		( result_expected_prev[16] !== 1'bx ) && ( result_prev[16] !== result_expected_prev[16] )
		&& ((result_expected_prev[16] !== last_result_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[16] = result_expected_prev[16];
	end
	if (
		( result_expected_prev[17] !== 1'bx ) && ( result_prev[17] !== result_expected_prev[17] )
		&& ((result_expected_prev[17] !== last_result_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[17] = result_expected_prev[17];
	end
	if (
		( result_expected_prev[18] !== 1'bx ) && ( result_prev[18] !== result_expected_prev[18] )
		&& ((result_expected_prev[18] !== last_result_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[18] = result_expected_prev[18];
	end
	if (
		( result_expected_prev[19] !== 1'bx ) && ( result_prev[19] !== result_expected_prev[19] )
		&& ((result_expected_prev[19] !== last_result_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[19] = result_expected_prev[19];
	end
	if (
		( result_expected_prev[20] !== 1'bx ) && ( result_prev[20] !== result_expected_prev[20] )
		&& ((result_expected_prev[20] !== last_result_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[20] = result_expected_prev[20];
	end
	if (
		( result_expected_prev[21] !== 1'bx ) && ( result_prev[21] !== result_expected_prev[21] )
		&& ((result_expected_prev[21] !== last_result_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[21] = result_expected_prev[21];
	end
	if (
		( result_expected_prev[22] !== 1'bx ) && ( result_prev[22] !== result_expected_prev[22] )
		&& ((result_expected_prev[22] !== last_result_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[22] = result_expected_prev[22];
	end
	if (
		( result_expected_prev[23] !== 1'bx ) && ( result_prev[23] !== result_expected_prev[23] )
		&& ((result_expected_prev[23] !== last_result_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[23] = result_expected_prev[23];
	end
	if (
		( result_expected_prev[24] !== 1'bx ) && ( result_prev[24] !== result_expected_prev[24] )
		&& ((result_expected_prev[24] !== last_result_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[24] = result_expected_prev[24];
	end
	if (
		( result_expected_prev[25] !== 1'bx ) && ( result_prev[25] !== result_expected_prev[25] )
		&& ((result_expected_prev[25] !== last_result_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[25] = result_expected_prev[25];
	end
	if (
		( result_expected_prev[26] !== 1'bx ) && ( result_prev[26] !== result_expected_prev[26] )
		&& ((result_expected_prev[26] !== last_result_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[26] = result_expected_prev[26];
	end
	if (
		( result_expected_prev[27] !== 1'bx ) && ( result_prev[27] !== result_expected_prev[27] )
		&& ((result_expected_prev[27] !== last_result_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[27] = result_expected_prev[27];
	end
	if (
		( result_expected_prev[28] !== 1'bx ) && ( result_prev[28] !== result_expected_prev[28] )
		&& ((result_expected_prev[28] !== last_result_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[28] = result_expected_prev[28];
	end
	if (
		( result_expected_prev[29] !== 1'bx ) && ( result_prev[29] !== result_expected_prev[29] )
		&& ((result_expected_prev[29] !== last_result_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[29] = result_expected_prev[29];
	end
	if (
		( result_expected_prev[30] !== 1'bx ) && ( result_prev[30] !== result_expected_prev[30] )
		&& ((result_expected_prev[30] !== last_result_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[30] = result_expected_prev[30];
	end
	if (
		( result_expected_prev[31] !== 1'bx ) && ( result_prev[31] !== result_expected_prev[31] )
		&& ((result_expected_prev[31] !== last_result_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port result[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", result_expected_prev);
		$display ("     Real value = %b", result_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_result_exp[31] = result_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Ula_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [1:0] aluOp;
reg [5:0] funct;
reg [31:0] input1;
reg [31:0] input2;
reg [5:0] opCode;
reg [4:0] shamt;
// wires                                               
wire [31:0] result;

wire sampler;                             

// assign statements (if any)                          
Ula i1 (
// port map - connection between master ports and signals/registers   
	.aluOp(aluOp),
	.funct(funct),
	.input1(input1),
	.input2(input2),
	.opCode(opCode),
	.result(result),
	.shamt(shamt)
);
// aluOp[ 1 ]
initial
begin
	aluOp[1] = 1'b1;
end 
// aluOp[ 0 ]
initial
begin
	aluOp[0] = 1'b0;
end 
// funct[ 5 ]
initial
begin
	funct[5] = 1'b1;
end 
// funct[ 4 ]
initial
begin
	funct[4] = 1'b0;
end 
// funct[ 3 ]
initial
begin
	funct[3] = 1'b0;
end 
// funct[ 2 ]
initial
begin
	funct[2] = 1'b0;
end 
// funct[ 1 ]
initial
begin
	funct[1] = 1'b0;
end 
// funct[ 0 ]
initial
begin
	funct[0] = 1'b0;
end 
// input1[ 31 ]
initial
begin
	input1[31] = 1'b0;
end 
// input1[ 30 ]
initial
begin
	input1[30] = 1'b0;
end 
// input1[ 29 ]
initial
begin
	input1[29] = 1'b0;
end 
// input1[ 28 ]
initial
begin
	input1[28] = 1'b0;
end 
// input1[ 27 ]
initial
begin
	input1[27] = 1'b0;
end 
// input1[ 26 ]
initial
begin
	input1[26] = 1'b0;
end 
// input1[ 25 ]
initial
begin
	input1[25] = 1'b0;
end 
// input1[ 24 ]
initial
begin
	input1[24] = 1'b0;
end 
// input1[ 23 ]
initial
begin
	input1[23] = 1'b0;
end 
// input1[ 22 ]
initial
begin
	input1[22] = 1'b0;
end 
// input1[ 21 ]
initial
begin
	input1[21] = 1'b0;
end 
// input1[ 20 ]
initial
begin
	input1[20] = 1'b0;
end 
// input1[ 19 ]
initial
begin
	input1[19] = 1'b0;
end 
// input1[ 18 ]
initial
begin
	input1[18] = 1'b0;
end 
// input1[ 17 ]
initial
begin
	input1[17] = 1'b0;
end 
// input1[ 16 ]
initial
begin
	input1[16] = 1'b0;
end 
// input1[ 15 ]
initial
begin
	input1[15] = 1'b0;
end 
// input1[ 14 ]
initial
begin
	input1[14] = 1'b0;
end 
// input1[ 13 ]
initial
begin
	input1[13] = 1'b0;
end 
// input1[ 12 ]
initial
begin
	input1[12] = 1'b0;
end 
// input1[ 11 ]
initial
begin
	input1[11] = 1'b0;
end 
// input1[ 10 ]
initial
begin
	input1[10] = 1'b0;
end 
// input1[ 9 ]
initial
begin
	input1[9] = 1'b0;
end 
// input1[ 8 ]
initial
begin
	input1[8] = 1'b0;
end 
// input1[ 7 ]
initial
begin
	input1[7] = 1'b0;
end 
// input1[ 6 ]
initial
begin
	input1[6] = 1'b1;
end 
// input1[ 5 ]
initial
begin
	input1[5] = 1'b1;
end 
// input1[ 4 ]
initial
begin
	input1[4] = 1'b1;
end 
// input1[ 3 ]
initial
begin
	input1[3] = 1'b1;
end 
// input1[ 2 ]
initial
begin
	input1[2] = 1'b0;
end 
// input1[ 1 ]
initial
begin
	input1[1] = 1'b1;
end 
// input1[ 0 ]
initial
begin
	input1[0] = 1'b1;
end 
// input2[ 31 ]
initial
begin
	input2[31] = 1'b0;
end 
// input2[ 30 ]
initial
begin
	input2[30] = 1'b0;
end 
// input2[ 29 ]
initial
begin
	input2[29] = 1'b0;
end 
// input2[ 28 ]
initial
begin
	input2[28] = 1'b0;
end 
// input2[ 27 ]
initial
begin
	input2[27] = 1'b0;
end 
// input2[ 26 ]
initial
begin
	input2[26] = 1'b0;
end 
// input2[ 25 ]
initial
begin
	input2[25] = 1'b0;
end 
// input2[ 24 ]
initial
begin
	input2[24] = 1'b0;
end 
// input2[ 23 ]
initial
begin
	input2[23] = 1'b0;
end 
// input2[ 22 ]
initial
begin
	input2[22] = 1'b0;
end 
// input2[ 21 ]
initial
begin
	input2[21] = 1'b0;
end 
// input2[ 20 ]
initial
begin
	input2[20] = 1'b0;
end 
// input2[ 19 ]
initial
begin
	input2[19] = 1'b0;
end 
// input2[ 18 ]
initial
begin
	input2[18] = 1'b0;
end 
// input2[ 17 ]
initial
begin
	input2[17] = 1'b0;
end 
// input2[ 16 ]
initial
begin
	input2[16] = 1'b0;
end 
// input2[ 15 ]
initial
begin
	input2[15] = 1'b0;
end 
// input2[ 14 ]
initial
begin
	input2[14] = 1'b0;
end 
// input2[ 13 ]
initial
begin
	input2[13] = 1'b0;
end 
// input2[ 12 ]
initial
begin
	input2[12] = 1'b0;
end 
// input2[ 11 ]
initial
begin
	input2[11] = 1'b0;
end 
// input2[ 10 ]
initial
begin
	input2[10] = 1'b0;
end 
// input2[ 9 ]
initial
begin
	input2[9] = 1'b0;
end 
// input2[ 8 ]
initial
begin
	input2[8] = 1'b0;
end 
// input2[ 7 ]
initial
begin
	input2[7] = 1'b0;
end 
// input2[ 6 ]
initial
begin
	input2[6] = 1'b0;
end 
// input2[ 5 ]
initial
begin
	input2[5] = 1'b0;
end 
// input2[ 4 ]
initial
begin
	input2[4] = 1'b0;
end 
// input2[ 3 ]
initial
begin
	input2[3] = 1'b1;
end 
// input2[ 2 ]
initial
begin
	input2[2] = 1'b1;
end 
// input2[ 1 ]
initial
begin
	input2[1] = 1'b0;
end 
// input2[ 0 ]
initial
begin
	input2[0] = 1'b0;
end 
// opCode[ 5 ]
initial
begin
	opCode[5] = 1'b0;
end 
// opCode[ 4 ]
initial
begin
	opCode[4] = 1'b0;
end 
// opCode[ 3 ]
initial
begin
	opCode[3] = 1'b0;
end 
// opCode[ 2 ]
initial
begin
	opCode[2] = 1'b0;
end 
// opCode[ 1 ]
initial
begin
	opCode[1] = 1'b0;
end 
// opCode[ 0 ]
initial
begin
	opCode[0] = 1'b0;
end 
// shamt[ 4 ]
initial
begin
	shamt[4] = 1'b0;
end 
// shamt[ 3 ]
initial
begin
	shamt[3] = 1'b0;
end 
// shamt[ 2 ]
initial
begin
	shamt[2] = 1'b0;
end 
// shamt[ 1 ]
initial
begin
	shamt[1] = 1'b0;
end 
// shamt[ 0 ]
initial
begin
	shamt[0] = 1'b0;
end 

Ula_vlg_sample_tst tb_sample (
	.aluOp(aluOp),
	.funct(funct),
	.input1(input1),
	.input2(input2),
	.opCode(opCode),
	.shamt(shamt),
	.sampler_tx(sampler)
);

Ula_vlg_check_tst tb_out(
	.result(result),
	.sampler_rx(sampler)
);
endmodule

